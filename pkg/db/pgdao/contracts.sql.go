// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: contracts.sql

package pgdao

import (
	"context"
	"database/sql"
)

const contractAdd = `-- name: ContractAdd :one
insert into contracts (
    id, customer_id, performer_id, application_id, title, description, price, duration, created_by
) values (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
returning id, customer_id, performer_id, application_id, title, description, price, duration, status, created_by, created_at, updated_at
`

type ContractAddParams struct {
	ID            string
	CustomerID    string
	PerformerID   string
	ApplicationID string
	Title         string
	Description   string
	Price         string
	Duration      sql.NullInt32
	CreatedBy     string
}

func (q *Queries) ContractAdd(ctx context.Context, arg ContractAddParams) (Contract, error) {
	row := q.db.QueryRowContext(ctx, contractAdd,
		arg.ID,
		arg.CustomerID,
		arg.PerformerID,
		arg.ApplicationID,
		arg.Title,
		arg.Description,
		arg.Price,
		arg.Duration,
		arg.CreatedBy,
	)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.PerformerID,
		&i.ApplicationID,
		&i.Title,
		&i.Description,
		&i.Price,
		&i.Duration,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const contractsPurge = `-- name: ContractsPurge :exec

DELETE FROM contracts
`

// on conflict
// do nothing
// Handle with care!
func (q *Queries) ContractsPurge(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, contractsPurge)
	return err
}
