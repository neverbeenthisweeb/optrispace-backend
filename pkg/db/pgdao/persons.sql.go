// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: persons.sql

package pgdao

import (
	"context"
)

const personAdd = `-- name: PersonAdd :one
insert into persons (
    id, address
) values (
    $1, $2
) 
on conflict (address)
do 
   update set address = $2
returning id, created_at, address
`

type PersonAddParams struct {
	ID      string
	Address string
}

func (q *Queries) PersonAdd(ctx context.Context, arg PersonAddParams) (Person, error) {
	row := q.db.QueryRowContext(ctx, personAdd, arg.ID, arg.Address)
	var i Person
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Address)
	return i, err
}

const personGet = `-- name: PersonGet :one
select id, created_at, address from persons
	where id = $1::varchar
`

func (q *Queries) PersonGet(ctx context.Context, id string) (Person, error) {
	row := q.db.QueryRowContext(ctx, personGet, id)
	var i Person
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Address)
	return i, err
}

const personGetByAddress = `-- name: PersonGetByAddress :one
select id, created_at, address from persons
	where address = $1::varchar
`

func (q *Queries) PersonGetByAddress(ctx context.Context, address string) (Person, error) {
	row := q.db.QueryRowContext(ctx, personGetByAddress, address)
	var i Person
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Address)
	return i, err
}

const personsList = `-- name: PersonsList :many
select id, created_at, address from persons
`

func (q *Queries) PersonsList(ctx context.Context) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, personsList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const personsPurge = `-- name: PersonsPurge :exec
DELETE FROM persons
`

// Handle with care!
func (q *Queries) PersonsPurge(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, personsPurge)
	return err
}
