// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: persons.sql

package pgdao

import (
	"context"
)

const personAdd = `-- name: PersonAdd :one
insert into persons (
    id, realm, login, password_hash, display_name, email
) values (
    $1, $2, $3, $4, $5, $6
) 
returning id, realm, login, password_hash, display_name, created_at, email, ethereum_address
`

type PersonAddParams struct {
	ID           string
	Realm        string
	Login        string
	PasswordHash string
	DisplayName  string
	Email        string
}

func (q *Queries) PersonAdd(ctx context.Context, arg PersonAddParams) (Person, error) {
	row := q.db.QueryRowContext(ctx, personAdd,
		arg.ID,
		arg.Realm,
		arg.Login,
		arg.PasswordHash,
		arg.DisplayName,
		arg.Email,
	)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Realm,
		&i.Login,
		&i.PasswordHash,
		&i.DisplayName,
		&i.CreatedAt,
		&i.Email,
		&i.EthereumAddress,
	)
	return i, err
}

const personChangePassword = `-- name: PersonChangePassword :exec
update persons
set
    password_hash = $1::varchar
where
    id = $2::varchar
`

type PersonChangePasswordParams struct {
	NewPasswordHash string
	ID              string
}

func (q *Queries) PersonChangePassword(ctx context.Context, arg PersonChangePasswordParams) error {
	_, err := q.db.ExecContext(ctx, personChangePassword, arg.NewPasswordHash, arg.ID)
	return err
}

const personGet = `-- name: PersonGet :one
select id, realm, login, password_hash, display_name, created_at, email, ethereum_address from persons
	where id = $1::varchar
`

func (q *Queries) PersonGet(ctx context.Context, id string) (Person, error) {
	row := q.db.QueryRowContext(ctx, personGet, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Realm,
		&i.Login,
		&i.PasswordHash,
		&i.DisplayName,
		&i.CreatedAt,
		&i.Email,
		&i.EthereumAddress,
	)
	return i, err
}

const personGetByLogin = `-- name: PersonGetByLogin :one
select id, realm, login, password_hash, display_name, created_at, email, ethereum_address from persons p
	where p.login = $1::varchar and p.realm = $2::varchar
`

type PersonGetByLoginParams struct {
	Login string
	Realm string
}

func (q *Queries) PersonGetByLogin(ctx context.Context, arg PersonGetByLoginParams) (Person, error) {
	row := q.db.QueryRowContext(ctx, personGetByLogin, arg.Login, arg.Realm)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Realm,
		&i.Login,
		&i.PasswordHash,
		&i.DisplayName,
		&i.CreatedAt,
		&i.Email,
		&i.EthereumAddress,
	)
	return i, err
}

const personPatch = `-- name: PersonPatch :one
update persons
set
    ethereum_address = case when $1::boolean
        then $2::varchar else ethereum_address end

where
    id = $3::varchar
returning id, realm, login, password_hash, display_name, created_at, email, ethereum_address
`

type PersonPatchParams struct {
	EthereumAddressChange bool
	EthereumAddress       string
	ID                    string
}

func (q *Queries) PersonPatch(ctx context.Context, arg PersonPatchParams) (Person, error) {
	row := q.db.QueryRowContext(ctx, personPatch, arg.EthereumAddressChange, arg.EthereumAddress, arg.ID)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Realm,
		&i.Login,
		&i.PasswordHash,
		&i.DisplayName,
		&i.CreatedAt,
		&i.Email,
		&i.EthereumAddress,
	)
	return i, err
}

const personsList = `-- name: PersonsList :many
select id, realm, login, password_hash, display_name, created_at, email, ethereum_address from persons
`

func (q *Queries) PersonsList(ctx context.Context) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, personsList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Realm,
			&i.Login,
			&i.PasswordHash,
			&i.DisplayName,
			&i.CreatedAt,
			&i.Email,
			&i.EthereumAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const personsPurge = `-- name: PersonsPurge :exec
DELETE FROM persons
`

// Handle with care!
func (q *Queries) PersonsPurge(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, personsPurge)
	return err
}
