// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: applications.sql

package pgdao

import (
	"context"
)

const applicationAdd = `-- name: ApplicationAdd :one
insert into applications (
    id, job_id, applicant_id
) values (
    $1, $2, $3
)
returning id, creation_ts, job_id, applicant_id
`

type ApplicationAddParams struct {
	ID          string
	JobID       string
	ApplicantID string
}

func (q *Queries) ApplicationAdd(ctx context.Context, arg ApplicationAddParams) (Application, error) {
	row := q.db.QueryRowContext(ctx, applicationAdd, arg.ID, arg.JobID, arg.ApplicantID)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.CreationTs,
		&i.JobID,
		&i.ApplicantID,
	)
	return i, err
}

const applicationGet = `-- name: ApplicationGet :one
select id, creation_ts, job_id, applicant_id from applications
	where id = $1::varchar
`

func (q *Queries) ApplicationGet(ctx context.Context, id string) (Application, error) {
	row := q.db.QueryRowContext(ctx, applicationGet, id)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.CreationTs,
		&i.JobID,
		&i.ApplicantID,
	)
	return i, err
}

const applicationsGetByApplicant = `-- name: ApplicationsGetByApplicant :many
select id, creation_ts, job_id, applicant_id from applications
	where applicant_id = $1::varchar
`

func (q *Queries) ApplicationsGetByApplicant(ctx context.Context, applicantID string) ([]Application, error) {
	rows, err := q.db.QueryContext(ctx, applicationsGetByApplicant, applicantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.CreationTs,
			&i.JobID,
			&i.ApplicantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const applicationsGetByJob = `-- name: ApplicationsGetByJob :many
select id, creation_ts, job_id, applicant_id from applications
	where job_id = $1::varchar
`

func (q *Queries) ApplicationsGetByJob(ctx context.Context, jobID string) ([]Application, error) {
	rows, err := q.db.QueryContext(ctx, applicationsGetByJob, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.CreationTs,
			&i.JobID,
			&i.ApplicantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const applicationsPurge = `-- name: ApplicationsPurge :exec
DELETE FROM applications
`

// Handle with care!
func (q *Queries) ApplicationsPurge(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, applicationsPurge)
	return err
}
