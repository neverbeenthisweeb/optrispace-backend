// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: applications.sql

package pgdao

import (
	"context"
	"database/sql"
	"time"
)

const applicationAdd = `-- name: ApplicationAdd :one
insert into applications (
    id, "comment", price, job_id, applicant_id
) values (
    $1, $2, $3, $4, $5
)
returning id, created_at, updated_at, comment, price, job_id, applicant_id
`

type ApplicationAddParams struct {
	ID          string
	Comment     string
	Price       string
	JobID       string
	ApplicantID string
}

func (q *Queries) ApplicationAdd(ctx context.Context, arg ApplicationAddParams) (Application, error) {
	row := q.db.QueryRowContext(ctx, applicationAdd,
		arg.ID,
		arg.Comment,
		arg.Price,
		arg.JobID,
		arg.ApplicantID,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Comment,
		&i.Price,
		&i.JobID,
		&i.ApplicantID,
	)
	return i, err
}

const applicationGet = `-- name: ApplicationGet :one

select a.id, a.created_at, a.updated_at, a.comment, a.price, a.job_id, a.applicant_id, c.id as contract_id from applications a
	left join contracts c on a.id = c.application_id
	where a.id = $1::varchar
`

type ApplicationGetRow struct {
	ID          string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Comment     string
	Price       string
	JobID       string
	ApplicantID string
	ContractID  sql.NullString
}

// on conflict
// do nothing
func (q *Queries) ApplicationGet(ctx context.Context, id string) (ApplicationGetRow, error) {
	row := q.db.QueryRowContext(ctx, applicationGet, id)
	var i ApplicationGetRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Comment,
		&i.Price,
		&i.JobID,
		&i.ApplicantID,
		&i.ContractID,
	)
	return i, err
}

const applicationsGetByApplicant = `-- name: ApplicationsGetByApplicant :many
select a.id, a.created_at, a.updated_at, a.comment, a.price, a.job_id, a.applicant_id, c.id as contract_id, c.status as contract_status, c.price as contract_price,
	j.title as job_title, j.description as job_description, j.budget as job_budget
	from applications a
	join jobs j on a.job_id = j.id
	left join contracts c on a.id = c.application_id
	where a.applicant_id = $1::varchar
  order by a.created_at desc
`

type ApplicationsGetByApplicantRow struct {
	ID             string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Comment        string
	Price          string
	JobID          string
	ApplicantID    string
	ContractID     sql.NullString
	ContractStatus sql.NullString
	ContractPrice  sql.NullString
	JobTitle       string
	JobDescription string
	JobBudget      sql.NullString
}

func (q *Queries) ApplicationsGetByApplicant(ctx context.Context, applicantID string) ([]ApplicationsGetByApplicantRow, error) {
	rows, err := q.db.QueryContext(ctx, applicationsGetByApplicant, applicantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApplicationsGetByApplicantRow
	for rows.Next() {
		var i ApplicationsGetByApplicantRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Comment,
			&i.Price,
			&i.JobID,
			&i.ApplicantID,
			&i.ContractID,
			&i.ContractStatus,
			&i.ContractPrice,
			&i.JobTitle,
			&i.JobDescription,
			&i.JobBudget,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const applicationsGetByJob = `-- name: ApplicationsGetByJob :many
select id, created_at, updated_at, comment, price, job_id, applicant_id from applications
	where job_id = $1::varchar
  order by created_at desc
`

func (q *Queries) ApplicationsGetByJob(ctx context.Context, jobID string) ([]Application, error) {
	rows, err := q.db.QueryContext(ctx, applicationsGetByJob, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Comment,
			&i.Price,
			&i.JobID,
			&i.ApplicantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const applicationsListBy = `-- name: ApplicationsListBy :many
select a.id, a.created_at, a.updated_at, a.comment, a.price, a.job_id, a.applicant_id, c.id as contract_id, c.status as contract_status, c.price as contract_price,
	j.title as job_title, j.description as job_description, j.budget as job_budget,
  COALESCE(p.display_name, p.login) AS applicant_display_name
	from applications a
	join jobs j on a.job_id = j.id
  join persons p on p.id = a.applicant_id
	left join contracts c on a.id = c.application_id
	where
	($1::varchar = '' or a.job_id = $1::varchar)
	and ($2::varchar = ''
		or a.applicant_id = $2::varchar
		or j.created_by = $2::varchar)
  order by a.created_at desc
`

type ApplicationsListByParams struct {
	JobID   string
	ActorID string
}

type ApplicationsListByRow struct {
	ID                   string
	CreatedAt            time.Time
	UpdatedAt            time.Time
	Comment              string
	Price                string
	JobID                string
	ApplicantID          string
	ContractID           sql.NullString
	ContractStatus       sql.NullString
	ContractPrice        sql.NullString
	JobTitle             string
	JobDescription       string
	JobBudget            sql.NullString
	ApplicantDisplayName string
}

func (q *Queries) ApplicationsListBy(ctx context.Context, arg ApplicationsListByParams) ([]ApplicationsListByRow, error) {
	rows, err := q.db.QueryContext(ctx, applicationsListBy, arg.JobID, arg.ActorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApplicationsListByRow
	for rows.Next() {
		var i ApplicationsListByRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Comment,
			&i.Price,
			&i.JobID,
			&i.ApplicantID,
			&i.ContractID,
			&i.ContractStatus,
			&i.ContractPrice,
			&i.JobTitle,
			&i.JobDescription,
			&i.JobBudget,
			&i.ApplicantDisplayName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const applicationsPurge = `-- name: ApplicationsPurge :exec
DELETE FROM applications
`

// Handle with care!
func (q *Queries) ApplicationsPurge(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, applicationsPurge)
	return err
}
