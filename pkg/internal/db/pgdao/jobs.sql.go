// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: jobs.sql

package pgdao

import (
	"context"
	"database/sql"
)

const jobAdd = `-- name: JobAdd :one
insert into jobs (
    id, title, description, customer_id
) values (
    $1, $2, $3, $4
) returning id, creation_ts, title, description, customer_id
`

type JobAddParams struct {
	ID          string
	Title       string
	Description string
	CustomerID  string
}

func (q *Queries) JobAdd(ctx context.Context, arg JobAddParams) (Job, error) {
	row := q.db.QueryRowContext(ctx, jobAdd,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.CustomerID,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.CreationTs,
		&i.Title,
		&i.Description,
		&i.CustomerID,
	)
	return i, err
}

const jobGet = `-- name: JobGet :one
select
    j.id,
    j.creation_ts,
    j.title,
    j.description,
    j.customer_id,
    p.address

    from jobs j
    right join persons p on j.customer_id = p.id
	where j.id = $1::varchar
`

type JobGetRow struct {
	ID          sql.NullString
	CreationTs  sql.NullTime
	Title       sql.NullString
	Description sql.NullString
	CustomerID  sql.NullString
	Address     string
}

func (q *Queries) JobGet(ctx context.Context, id string) (JobGetRow, error) {
	row := q.db.QueryRowContext(ctx, jobGet, id)
	var i JobGetRow
	err := row.Scan(
		&i.ID,
		&i.CreationTs,
		&i.Title,
		&i.Description,
		&i.CustomerID,
		&i.Address,
	)
	return i, err
}

const jobsList = `-- name: JobsList :many
select
    j.id,
    j.creation_ts,
    j.title,
    j.description,
    j.customer_id,
    p.address
    from jobs j
    right join persons p on j.customer_id = p.id
    order by creation_ts
`

type JobsListRow struct {
	ID          sql.NullString
	CreationTs  sql.NullTime
	Title       sql.NullString
	Description sql.NullString
	CustomerID  sql.NullString
	Address     string
}

func (q *Queries) JobsList(ctx context.Context) ([]JobsListRow, error) {
	rows, err := q.db.QueryContext(ctx, jobsList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobsListRow
	for rows.Next() {
		var i JobsListRow
		if err := rows.Scan(
			&i.ID,
			&i.CreationTs,
			&i.Title,
			&i.Description,
			&i.CustomerID,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
